<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs title="toolbox gadget" height="500" width="1000">
    <Require feature="minimessage"/>
</ModulePrefs>
<Content type="html"><![CDATA[

<style type="text/css"> 
  .header1
  {
    background:#E5ECF9 none repeat scroll 0 0;
    font-size:1.2em;
    margin:1em 0 0px;
    padding:4px 6px;
    font-size-adjust:none;
    font-style:normal;
    font-variant:normal;
    font-weight:normal;
    line-height:normal;
  }

  #workBox
  {  
    width: 400px;
    margin-left: 15px;
    height: 300px;
    float: left;
  }

  #propertyBox
  { 
    margin-left: 15px;
    height: 300px;
    width: 200px;
    float: left;
  }

  #navcontainer
  {
	float: left; 
	width: 200px
	margin-left: 30px;
	height: 300px;
  }

  #navcontainer ul
  {
	margin: 0;
	padding: 0;
	list-style-type: none;
	font-family: verdana, arial, sans-serif;
  }

  #navcontainer li
  {
	margin: 0;
  }

  #navcontainer a
  {
	display: block;
	color: #333;
	background-color: transparent;
	width: 140px;
	padding: 2px 10px;
	text-decoration: none;
	font-size: 12px;
  }

  #navcontainer img
  {
	border: none;
  }

  #navcontainer a:hover
  {
	background-color: #ddd;
	color: #333;
	border-right: 10px solid #aaa;
	padding: 2px 1px 2px 10px;
  }

  #navcontainer ul ul
  {
	margin-left: 30px;
	padding: 0;
	list-style-type: none;
  }

  #navcontainer li li a
  {
	display: block;
	color: #333;
	background-color: transparent;
	width: 110px;
	padding: 2px 10px;
	margin: 0;
	border-top: none;
	border-bottom: none;
	border-left: 1px solid #aaa;
	text-decoration: none;
	font-size: 12px;
  }
</style>  

<h1 class="header1"> Toolbox Gadget </h1>
		
<div id="navcontainer" class="header1">
</div>

<div id="workBox" class="header1">
	<p>This is content</p>
</div>
		
<div id="propertyBox" class="header1">
	<p>This is property box</p>
</div>

<script type="text/javascript">
    var gpHC = function () {

	function HTML_Element (name, description, properties) {
		this.name = name;
		this.description = description;
		this.properties = properties || arguments.slice(2);
	}
	
	function createXMLParser () {
		try {		//Internet Explorer
  			xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
  		}
		catch(e) {
  			try { //Firefox, Mozilla, Opera, etc.
    				xmlDoc=document.implementation.createDocument("","",null);
    			}
  			catch(e)  {
    				alert("Your browser does not implement XML parser!");
    				return;
    			}
  		}
		
		xmlDoc.async = false;
		return xmlDoc;
	}
		
	function createToolBox (xmlDoc) {
                
                //msg.createDismissibleMessage("velicina "+xmlDoc.getElementsByTagName("element").length);
		
                for(var i=0, elements = xmlDoc.getElementsByTagName("element");i<elements.length;++i) {
                        
			var current_element = new HTML_Element(elements[i].attributes["id"].firstChild.nodeValue, elements[i].attributes["desc"].firstChild.nodeValue, {});
			for(var j=0, properties = elements[i].childNodes; j<properties.length;++j) {
				if(properties[j].nodeName == "property")
					current_element.properties[properties[j].firstChild.nodeValue] = "N/A";
			}
			DataElements.push(current_element);
		}
		
		var parentDiv = $("navcontainer");
		var parentUl = document.createElement("ul");
		parentUl.setAttribute("id", "navlist");

		
		for(var i=0; i<DataElements.length;++i) {
			var listItem = document.createElement("li");
			var innerA = document.createElement("a");
			innerA.setAttribute("href", "#");
			innerA.innerHTML  = DataElements[i].toToolboxItem();
			listItem.appendChild(innerA);
			parentUl.appendChild(listItem);
		}
		
		parentDiv.appendChild(parentUl);
	}
	
	function $ (id) {
		return document.getElementById(id);
	}
	
	HTML_Element.prototype.getProperty = function (property) {
		return this.properties[property];
	}
	
	HTML_Element.prototype.toString = function () {
		return "["+this.name +"]";
	}
	
	HTML_Element.prototype.toToolboxItem = function () {
		return this.toImageTag() + " - " + this.name;
	}
	
	HTML_Element.prototype.toImageTag = function () {
		return "<img class='toolImg' title='"+this.name + " - " + this.description+"'  alt='"+this.description+"' src='http://toolbox-gadget.googlecode.com/svn/trunk/images/"+this.name.toLowerCase() +".gif'/>";
	}

        makeDOMRequest = function (url) {
                _IG_FetchXmlContent(url, response);
        }
  
        response = function (obj) { 
                  createToolBox(obj);
        }

	DataElements = new Array();
 
        var msg = new _IG_MiniMessage(__MODULE_ID__);
  
	return {
		
		init: function () {
                        makeDOMRequest("http://toolbox-gadget.googlecode.com/svn/trunk/specification.xml");
		}
	
	};
  }( );

  gpHC.init();
</script>

]]></Content>
</Module>
