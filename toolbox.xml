<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs title="toolbox gadget" height="375" width="1000" author="Goran Petrovic">
    <Require feature="minimessage"/>
    <Require feature="drag" />
    <Require feature="grid" />
</ModulePrefs>
<Content type="html"><![CDATA[

<style type="text/css"> 

  .header1
  {
    background:#E5ECF9 none repeat scroll 0 0;
    font-size:1.2em;
    margin:0 0 0px;
    padding:4px 6px;
    font-size-adjust:none;
    font-style:normal;
    font-variant:normal;
    font-weight:normal;
    line-height:normal;
  }
  
  .panelItem
  {
      float:left;
      border: 1px dotted black;
      padding: 10px 0px 10px 10px; 
      width: 275px; 
      background-color: #e9e6f9;
  }
  
  .panelProperties
  {
      float:right;
      padding: 5px 0px 10px 0px; 
  }
  
  .panelPropertiesContainer
  {
      width:350px;
  }
  
  .alt
  {
      background-color: #e6f6f9;
  }
  
  .selected
  {
      border: 1px solid black;
  }
  
  .propertyText
  {
    width : 120px;
    border:none;
  }
  
  #debug_div
  {
    float:left;
    width:100%;
  }
  
  #workBox
  {  
    width: 400px;
    margin-left: 15px;
    height: 300px;
    float: left;
  }

  #propertyBox, #navBox
  { 
    margin-left: 15px;
    height: 300px;
    float: left;
    width: 250px;
  }
  
  #propertyBox select
  { 
    border:1px solid #78ACFF;
    vertical-align:middle;
    width:175px;
  }
    
  #navBox
  { 
    width: 200px;
  }
  
  #propertyBoxContainer, #workBoxContainer, #navcontainer
  {
    overflow : scroll;
    overflow-x:hidden;
    height: 240px;
  }
  
  #propertyBox p, #workBox p, #navBox p
  {   
    font-size: 0.8em;
  }

  #navcontainer
  {
    float: left; 
    width:200px;
  }

  #navcontainer ul
  {
	margin: 0;
	padding: 0;
	list-style-type: none;
	font-family: verdana, arial, sans-serif;
  }

  #navcontainer li img
  {
        vertical-align:middle;
	margin: 0;
  }

  #navcontainer a
  {
	display: block;
	color: #333;
	background-color: transparent;
	width: 180px;
	padding: 2px 10px;
	text-decoration: none;
	font-size: 12px;
  }

  #navcontainer img
  {
	border: none;
  }

  #navcontainer a:hover
  {
	background-color: #ddd;
	color: #333;
	border-right: 10px solid #aaa;
	padding: 2px 1px 2px 10px;
  }

  #navcontainer ul ul
  {
	margin-left: 30px;
	padding: 0;
	list-style-type: none;
  }

  #navcontainer li li a
  {
	display: block;
	color: #333;
	background-color: transparent;
	width: 110px;
	padding: 2px 10px;
	margin: 0;
	border-top: none;
	border-bottom: none;
	border-left: 1px solid #aaa;
	text-decoration: none;
	font-size: 12px;
  }
  
  body
  {
        scrollbar-face-color: #f0f0f0;
        scrollbar-highlight-color: #cccccc;
        scrollbar-shadow-color: #cccccc;
        scrollbar-3dlight-color: #f0f0f0;
        scrollbar-arrow-color: #330066;
        scrollbar-darkshadow-color: #cccccc;
        scrollbar-base-color: #cccccc;
  }
  
  table.column
  {
	text-align: center;
	font-family: Verdana;
	font-weight: normal;
	font-size: 11px;
	color: #404040;
	background-color: #fafafa;
	border: 1px #6699CC solid;
	border-collapse: collapse;
	border-spacing: 0px;
  }
</style>  

<h1 class="header1"> Toolbox Gadget v0.3 <em> alpha </em> </h1>

<div id="navBox">
   <p id="p_toolbox_label">
      <b> Toolbox </b>
  </p>
  
  <div id="navcontainer" class="header1">
  </div>
</div>

<div id="workBox" >
 <p id="p_control_count">
      <b> Control grid: </b> <em>(0)</em>
  </p>
  
  <div class="header1" id="workBoxContainer">
    <p> <em>Drag controls here </em> </p>
 </div>
</div>
		
<div id="propertyBox">
  <p id="p_current_control">
      <b> Current </b> <em>none</em>
  </p>
  
  <div class="header1" id="propertyBoxContainer">
    <span id="properties_grid_span"></span>
  </div>
</div>

<div id="debug_div"></div>
<script type="text/javascript">
    var gpHC = function () {

	var msg = new _IG_MiniMessage(__MODULE_ID__, $("debug_div"));
        var controller, viewPanel, viewList, viewStatus, viewProperties;
    
        Object.prototype.clone = function() {
              var newObj = (this instanceof Array) ? [] : {};
              for (i in this) {
                  if (i == 'clone') continue;
                  if (this[i] && typeof this[i] == "object") {
                      newObj[i] = this[i].clone();
                  }
                  else newObj[i] = this[i]
              }
              return newObj;
        };        
        
        var errorHelper = function() {
          return {
              postError : function(errorText) {
                  _gel("debug_div").innerHTML += errorText+"<hr/>"
              },
              
              clearErrors : function() {
                  _gel("debug_div").innerHTML="";
              }
          }
        } ();
        
        function HTML_Property(name, value) {
                this.name = name;
                this.value = value;
        }
  
        HTML_Property.prototype.getProperty = function (name) {
                return this.value[name];
        }
        
        function gridParameters() {
            this.data = new Array();
        }
        
        propertyUpdated = function(index, value) {
                if(controller.model.selected == -1)
                    return;
                    
                controller.updateProperty(index, value);
                msg.createTimerMessage("Control edited, saving changes...", 2);
        };
        
        gridParameters.prototype._IGG_getNormalView = function(index) { 
                if (index % 2 == 0)
                    return "<p title='"+this.data[index+1].desc+"'>" + this.data[index] +"</p>";
                else return "<input class='propertyText' onchange='propertyUpdated("+parseInt(index/2)+",this.value);' type='text' id='toolbox_"+this.data[index-1]+"' value ='"+this.data[index].default+"' />";
        }  
      
        gridParameters.prototype._IGG_isDragSource = function(index) {
                return false;
        }

        gridParameters.prototype._IGG_isDragTarget = function(index, sourceIndex) {
                return false;
        }
  
        function HTML_Element (name, description, properties, tag) {
		this.name = name;
		this.description = description;
		this.properties = properties || arguments.slice(2);
                this.tag = tag;
	}
	
	function createXMLParser () {
		try {		//Internet Explorer
  			xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
  		}
		catch(e) {
  			try { //Firefox, Mozilla, Opera, etc.
    				xmlDoc=document.implementation.createDocument("","",null);
    			}
  			catch(e)  {
    				alert("Your browser does not implement XML parser!");
    				return;
    			}
  		}
		
		xmlDoc.async = false;
		return xmlDoc;
	}
		
	function createToolBox (xmlDoc) {
                for(var i=0, elements = xmlDoc.getElementsByTagName("element");i<elements.length;++i) {
                        
			var current_element = new HTML_Element(elements[i].attributes["id"].firstChild.nodeValue, elements[i].attributes["desc"].firstChild.nodeValue, {}, elements[i].attributes["tag"].firstChild.nodeValue);
                        current_element.properties = new Array();
			for(var j=0, properties = elements[i].childNodes; j<properties.length;++j) {
				if(properties[j].nodeName == "property") {
  					current_element.properties[current_element.properties.length] = new HTML_Property(properties[j].firstChild.nodeValue, {"default":((properties[j].attributes && properties[j].attributes["default"])?properties[j].attributes["default"].nodeValue:""), "desc":((properties[j].attributes && properties[j].attributes["desc"])?properties[j].attributes["desc"].nodeValue:""),"regex":((properties[j].attributes && properties[j].attributes["regex"])?properties[j].attributes["regex"].nodeValue:"")});
                                }
			}
			DataElements.push(current_element);
		}
		var parentDiv = $("navcontainer");
		var parentUl = document.createElement("ul");
		parentUl.setAttribute("id", "navlist");

		
		for(var i=0; i<DataElements.length;++i) {
			var listItem = document.createElement("li");
			var innerA = document.createElement("a");
                
			innerA.setAttribute("href", "#");
                        innerA.setAttribute("tag", i);
                        innerA.setAttribute("id", "toolbox_a_"+DataElements[i].name);
			innerA.innerHTML  = DataElements[i].toToolboxItem();
                  	listItem.appendChild(innerA);
			parentUl.appendChild(listItem);
		}
		
		parentDiv.appendChild(parentUl);
                
         	for(var i=0; i<DataElements.length;++i) {
                  drag_obj.addSource("toolbox_a_"+DataElements[i].name);
                }
                
                // MVC init
                controller = new gpHC.MVCLibrary.Controller(new gpHC.MVCLibrary.Model([]));

                viewPanel = new gpHC.MVCLibrary.View(controller.model, _gel("workBoxContainer"), function(targetControl) {
                       while(targetControl.firstChild) targetControl.removeChild(targetControl.firstChild);

                       var italic_text = document.createElement("em");
                       var p_italic_text = document.createElement("p");
                            
                       italic_text.innerHTML = "Drop controls here: ";
                       p_italic_text.appendChild(italic_text);
                       targetControl.appendChild(p_italic_text);

                                                                        
                      for(var i = 0; i<controller.model.data.length; ++i) {
                            var newDiv = document.createElement("div");
                            var newDOMElement = document.createElement(this.model.data[i].tag);
                            var propertiesDiv = document.createElement("div");
                            var propertiesContainerDiv = document.createElement("div");
                            var deleteImage = document.createElement("img");
                            
                            var classValue =  "panelItem" + ((i%2==0)?"":" alt") + ((this.model.selected==i)?" selected":"");
                            
                            newDiv.setAttribute("class", classValue)
                            propertiesDiv.setAttribute("class", "panelProperties")
                            propertiesContainerDiv.setAttribute("class", "panelPropertiesContainer")
                            
                            deleteImage.setAttribute("src", "http://static.ak.fbcdn.net/images/streams/x_hide_story.gif");
                            deleteImage.setAttribute("title", "Delete this control.");
                            deleteImage.setAttribute("onclick", "javascript:removeElement("+i+")");

                            for(var j=0, attributes = this.model.data[i].properties; j < attributes.length; ++j) {
                                  if(attributes[j] && attributes[j].value.default != "") {
                                      newDOMElement.setAttribute(attributes[j].name, attributes[j].value.default); 
                                  }
                       
                                newDiv.appendChild(newDOMElement);
                            }

                          newDiv.setAttribute("onclick","showProperties("+i+")");

                          propertiesDiv.appendChild(deleteImage);
                          
                          propertiesContainerDiv.appendChild(newDiv);
                          propertiesContainerDiv.appendChild(propertiesDiv);
                                                   
                          targetControl.appendChild(propertiesContainerDiv);
                      }
                });
  
                viewList = new gpHC.MVCLibrary.View(controller.model, _gel("p_current_control"), function(targetControl) {
                      while(targetControl.firstChild) targetControl.removeChild(targetControl.firstChild);
  
                      var newSelect = document.createElement("select");
  
                      for(var i = 0; i<this.model.data.length; ++i) {
                                var newOption = document.createElement("option");
                                newOption.setAttribute("value", i);
                      
                                if(this.model.selected == i)
                                    newOption.setAttribute("selected", "selected");
                      
                                newOption.innerHTML = controller.model.data[i].name + " (id = " + i + ")";
                       
                                newSelect.appendChild(newOption);
                            }
                      
                      newSelect.setAttribute("id","selectList");
                      newSelect.setAttribute("onchange","showProperties(this.selectedIndex)");
                      var bold_text = document.createElement("b");
                      bold_text.innerHTML = "Current: ";
  
                      targetControl.appendChild(bold_text);
                      targetControl.appendChild(newSelect);
                });
                      
                viewProperties = new gpHC.MVCLibrary.View(controller.model, _gel("properties_grid_span"), function(targetControl) {
                      
                      while(targetControl.firstChild) targetControl.removeChild(targetControl.firstChild);
  
                      var properties = this.model.getDataByIndex(this.model.selected).properties;
                      var pGridValues = new gridParameters();
                 
                      for(var j=0;j<properties.length;++j) {
                           pGridValues.data[pGridValues.data.length] = properties[j].name;
                           pGridValues.data[pGridValues.data.length] = properties[j].value;
                      }
        
                      var properties_grid = new _IG_Grid(pGridValues, "toolbox_properties_grid", properties.length, 2);
                      properties_grid.getTable().border = 2;
                      var given_table = properties_grid.getTable();                 
                 
                      properties_grid.table.setAttribute("class", "column");
                 
                      targetControl.appendChild(given_table);
                });
  
                viewStatus = new gpHC.MVCLibrary.View(controller.model, _gel("p_control_count"), function(targetControl) {
                      while(targetControl.firstChild) targetControl.removeChild(targetControl.firstChild);
                      
                      targetControl.innerHTML = "<b> Control grid: </b> <em>("+this.model.data.length+")</em>";
                });
                
                controller.addListener(viewPanel);
                controller.addListener(viewStatus);
                controller.addListener(viewList);
                controller.addListener(viewProperties);
	}
	
	function $ (id) {
		return document.getElementById(id);
	}
	
	HTML_Element.prototype.getProperty = function (property) {
		return this.properties[property];
	}
	
	HTML_Element.prototype.toString = function () {
		return "["+this.name +"]";
	}
	
	HTML_Element.prototype.toToolboxItem = function () {
		return this.toImageTag() + " - " + this.name;
	}
	
	HTML_Element.prototype.toImageTag = function () {
		return "<img class='toolImg' title='"+this.name + " - " + this.description+"'  alt='"+this.description+"' src='http://toolbox-gadget.googlecode.com/svn/trunk/images/"+this.name.toLowerCase() +".gif'/>";
	}

        makeDOMRequest = function (url) {
                _IG_FetchXmlContent(url, response, {refreshInterval:0});
        }
  
        response = function (obj) { 
                createToolBox(obj);
        }
  
        var drag_obj = new _IG_Drag();
        drag_obj.addTarget("workBox_div", _gel("workBoxContainer"));
  
        drag_obj.onDragEnd = function(source, target) {
                if (target == null) return;
    
                var i = parseInt(source.getAttribute("tag")); 
                var addedElement = DataElements[i].clone();
  
                controller.addItem(addedElement);
  
                msg.createTimerMessage("New control added: " + addedElement.name, 2);        
        }
  
        removeElement = function (i) {
                 msg.createTimerMessage("Removing control " + DataElements[i].name+"...", 2); 
                 controller.removeItem(i);

        }
        
        showProperties = function (i) {                
                 controller.select(i);
        }
  
	DataElements = new Array();
  
	return {
		
		init: function () {
                    makeDOMRequest("http://toolbox-gadget.googlecode.com/svn/trunk/specification.xml");
		}
	
	};
}( );

gpHC.MVCLibrary = function() {
        var msg = new _IG_MiniMessage(__MODULE_ID__, _gel("debug_div"));        
        
        var listContains = function(list, value) {
            if(list && list.length){
                   for(var i = 0; i < list.length; ++i) {
                       if (list[i] == value)
                           return i;
                   }
                 return -1;
            }
            return -1;
        };
  
        var listRemove = function(list, index) {
            if(list && list.length){
                   var newList = [];
                   
                   for(var i = 0; i < list.length; ++i) {
                       if (i != index)
                           newList[newList.length] = list[i];
                   }
                   
                   return newList;
            }
            return null;
        };
  
        var Model = function(data) {
                   this.data = data;
                   this.selected = -1;
        };
        
        Model.prototype.getDataByIndex = function (i) {
                return this.data[i];
        };
                   
        Model.prototype.addItem = function(item) {
                if (listContains(this.data, item)==-1) {
                           this.data[this.data.length]=item;
                }
        };

        Model.prototype.removeItem = function(index) {
                  if (this.data.length - 1 >= index) {
                           this.data = listRemove(this.data, index);  
                  }
        };
  
        var Controller = function (model) {
                   this.listeners = [];
                   this.model = model;
        };
        
        Controller.prototype.select = function(index) {
                this.model.selected = index;
                this.triggerUpdate();
        };
        
        Controller.prototype.updateProperty = function(index, value) {
                var re = new RegExp(this.model.data[this.model.selected].properties[index].value.regex.substring(1, this.model.data[this.model.selected].properties[index].value.regex.length-1));
                if(this.model.data[this.model.selected].properties[index].value.regex != "") {
                    if(value !=="" && value.match(re)==value) {
                          this.model.data[this.model.selected].properties[index].value.default = value;
                          this.triggerUpdate();
                    }
                    else {
                          msg.createTimerMessage("Update unsuccessfull: wrong attribute value! value = "+ value + "; Regular expression: "+ re, 3)
                    } 
                }
        };
        
        Controller.prototype.addItem = function(item) {
                 this.model.addItem(item);
                 this.triggerUpdate();
        };
                     
        Controller.prototype.removeItem = function(item) {
                 this.model.removeItem(item);
                 this.triggerUpdate();
        };
  
        Controller.prototype.updateModel = function(data) {
              this.model.data = data;
              this.triggerUpdate();
        };

        Controller.prototype.addListener = function(view) {
              if (listContains(this.listeners, view)==-1) {
                  this.listeners[this.listeners.length]=view;
              }
        };

        Controller.prototype.removeListener = function(view) {
              if (listContains(this.listeners, view) !=-1) {
                  listRemove(this.listeners, view);
              }
        };

        Controller.prototype.triggerUpdate = function() {
              for(var i = 0; i < this.listeners.length; ++i) {
                    this.listeners[i].modelUpdated();
              }
        };
        
        var View = function(model, targetControl, drawMethod) {
                     this.targetControl = targetControl;
                     this.model = model;
                     this.drawMethod = drawMethod;
        };
        
        View.prototype.modelUpdated = function() {
                     this.redraw();
        };
                     
        View.prototype.redraw = function (){
                    this.drawMethod(this.targetControl);
        };
                     
        return { "Model":Model, "Controller":Controller, "View":View };
}( );

gpHC.init();
</script>

]]></Content>
</Module>